#!/bin/bash

source ~/.mjwdotfiles/colors

# Don't tell me I've got mail
unset MAILCHECK

# history

HISTSIZE=1000
HISTFILESIZE=10000
HISTCONTROL=ignoreboth

# editor

if [[ $( which emacs24 ) == "" ]]; then
    export EDITOR='emacs -nw'
    alias e='emacs -nw'
else
    export EDITOR='emacs24 -nw'
    alias e='emacs24 -nw'
fi

# pager

PAGER="less -FirSwX"
MANPAGER="$PAGER"
export PAGER MANPAGER

# aliases

alias l='ls -lrth --color=always --group-directories-first';
alias ls='ls --color=always --group-directories-first';
alias lw='ls';
alias cs='cd';
alias more=less

# functions

function parse_git_branch {
    git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
}

function extract(){

     if [ -f $1 ] ; then
         case $1 in
             *.tar.bz2)   tar xvjf $1     ;;
             *.tar.gz)    tar xvzf $1     ;;
             *.bz2)       bunzip2 $1      ;;
             *.rar)       unrar x $1      ;;
             *.gz)        gunzip $1       ;;
             *.tar)       tar xvf $1      ;;
             *.tbz2)      tar xvjf $1     ;;
             *.tgz)       tar xvzf $1     ;;
             *.zip)       unzip $1        ;;
             *.Z)         uncompress $1   ;;
             *.7z)        7z x $1         ;;
             *)           echo "'$1' cannot be extracted via >extract<" ;;
         esac
     else
         echo "'$1' is not a valid file"
     fi
}

function clean(){
    rm -f *.pyc &> /dev/null
    rm -f *~ &> /dev/null
    rm -f \#*
}

# prompt

function parse_git_branch {
    git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
}

function prompt_normal() {
    # name@system:~/my/path $
    # name@system:~/my/path (master) $
    export PS1="${debian_chroot:+($debian_chroot)}\u@$GREEN\h$PS_CLEAR:\w"
    export PS1="$PS1$CYAN\$(parse_git_branch)$PS_CLEAR \$ "
}

function prompt_compact() {
    # system:~/my/path $
    # system:~/my/path (master) $
    export PS1="$GREEN\h$PS_CLEAR:\w"
    export PS1="$PS1$CYAN\$(parse_git_branch)$PS_CLEAR \$ "
}

function gradle-init() {
    # Creates an outline gradle file
    local name=$1
    
    mkdir $name
    mkdir $name/src
    mkdir $name/src/main
    mkdir $name/src/main/java
    mkdir $name/src/main/resources
    mkdir $name/src/test
    mkdir $name/src/test/java
    mkdir $name/src/test/resources
    
    echo "apply plugin: 'java'" > $name/build.gradle

}

prompt_normal

# path

export GOPATH=$HOME/code/go
export PATH=$PATH:$HOME/bin
export PATH=$PATH:$GOPATH/bin
